name: PR comment workflow

on:
  issue_comment:
    types:
      - created
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  debug-log:
    name: "debug test"
    runs-on: ubuntu-latest
    if: contains(fromJson('["OWNER", "MEMBER"]'), github.event.comment.author_association)
    steps:
      - name: "step"
        run: |
          echo "${{ github.event.comment.body }}"
          echo "${{ github.event.comment.author_association }}"
          echo "${{ toJson(github.event.issue.pull_request) }}"
          echo "Is PR: ${{ github.event.issue.pull_request != null }}"

  load-files:
    name: "Load files"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-output.outputs.e2eFiles }}
    steps:
      - id: set-output
        run: echo "e2eFiles=azerty2" >> $GITHUB_OUTPUT

  build:
    name: "Build"
    runs-on: ubuntu-latest
    needs: [load-files]
    if: >-
      github.event.comment.body == '/run-cctp-tests' &&
      github.event.issue.pull_request != null &&
      needs.load-files.outputs.matrix == 'azerty2'
    steps:
      - name: Check if commenter is OWNER
        run: |
          if [[ "${{ github.event.comment.author_association }}" != "OWNER" ]]; then
            echo "Error: Only repository owners can trigger the build step."
            exit 1
          fi

  update-pr-status:
    name: "Update PR Status"
    needs: [build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Create check run
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            
            // Fetch the PR data to get the latest SHA
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: issue_number,
            });
            
            const head_sha = pr.head.sha;
            const workflowUrl = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;

            await github.rest.checks.create({
              owner,
              repo,
              name: 'CCTP Tests',
              head_sha: head_sha,
              status: 'completed',
              conclusion: '${{ needs.build.result }}',
              output: {
                title: 'CCTP Tests Result',
                summary: 'The CCTP tests have completed.',
                text: `For detailed information, please check the [workflow run](${workflowUrl}).`
              }
            });